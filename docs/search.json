[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello everyone\n\n\nOn this about page, you might want to add more information about yourself, the project, or course.\n\n\nMy name is Eric Delmelle, the instructor for the course.\nYou can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2024.\nWrite something about you\n\nor about something you like"
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Optimizing Bike-Sharing Operations",
    "section": "",
    "text": "Discover the hidden patterns and insights behind New York City’s most popular bike-sharing system.\nEver wondered how weather affects ridership? Which stations see the most action? Or what makes casual riders different from members? Dive into the visuals and detailed analyses to uncover the trends shaping Citi Bike in Manhattan.\nFrom top-performing stations to customer segmentation and beyond, each section offers a glimpse into the data driving smarter, more sustainable urban mobility.\nReady to explore? Click through to see how Citi Bike keeps New York moving.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Optimizing Bike-Sharing Operations",
    "section": "",
    "text": "Discover the hidden patterns and insights behind New York City’s most popular bike-sharing system.\nEver wondered how weather affects ridership? Which stations see the most action? Or what makes casual riders different from members? Dive into the visuals and detailed analyses to uncover the trends shaping Citi Bike in Manhattan.\nFrom top-performing stations to customer segmentation and beyond, each section offers a glimpse into the data driving smarter, more sustainable urban mobility.\nReady to explore? Click through to see how Citi Bike keeps New York moving.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Project/index.html",
    "href": "Project/index.html",
    "title": "Project",
    "section": "",
    "text": "This report provides a comprehensive analysis of Citi Bike operations in Manhattan during July 2024, uncovering key insights into ridership behavior, revenue generation, and station performance. The study highlights the system’s reliance on weekday commuter demand, its sensitivity to weather conditions, and its strong integration with Manhattan’s bike lane network.\nThe findings emphasize opportunities for targeted interventions, such as expanding infrastructure in high-demand areas, improving underperforming stations, and incentivizing casual users to convert to memberships. These recommendations aim to optimize operations, enhance user satisfaction, and reinforce Citi Bike’s role as a sustainable urban mobility solution in New York City.",
    "crumbs": [
      "Project"
    ]
  },
  {
    "objectID": "Project/project.html",
    "href": "Project/project.html",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "",
    "text": "The Citi Bike data reveals intriguing temporal trends in daily ridership. The chart titled Daily Ridership Trends demonstrates that the highest ridership occurred on weekdays, particularly July 1st and July 10th, corresponding to Monday and Wednesday, respectively. These peaks reflect the system’s role in supporting Manhattan’s weekday commuter base. The midweek ridership stability showcases Citi Bike’s seamless integration into the city’s transportation ecosystem for office workers, students, and other routine commuters.\nHowever, the sharp dip during the weekend (July 6th–7th) signals an underutilized potential for leisure trips. With Manhattan hosting several tourist hotspots and vibrant weekend activities, the absence of a proportional rise in leisure ridership on weekends is noteworthy. This suggests that Citi Bike could improve its outreach to tourists and casual users who might otherwise opt for taxis or public transit. Offering targeted weekend packages, promoting bike tours, or collaborating with cultural and recreational events could help bridge this gap.\nInterestingly, the overall average of 90,000 daily trips highlights the resilience and reliability of Citi Bike’s operations. Despite varying weather conditions and external factors, the consistent demand underscores its importance to New Yorkers.\nThe membership distribution paints a striking picture of Citi Bike’s user base. Members contribute 77.3% of all trips, far outweighing the 22.7% share of casual users. This divide is both a strength and a vulnerability. While the loyalty and frequent usage of members stabilize revenue streams, the low proportion of casual riders points to untapped market potential.\nCritically, casual users are an important demographic for expanding Citi Bike’s reach. Their occasional use might stem from perceived barriers, such as unfamiliarity with the system or a lack of compelling benefits to join as members. By targeting these riders with discounts, loyalty programs, or easier onboarding processes, Citi Bike can create a pathway for casual users to transition into long-term subscribers. Creative solutions such as gamification (e.g., earning badges for rides) or bundling memberships with other services (e.g., public transit passes) could further bolster membership numbers.\n\n\nShow/Hide Code\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nimport geopandas as gpd\nfrom datetime import datetime\nimport requests\nimport osmnx as ox\nfrom shapely.geometry import Polygon, Point\nimport hvplot.pandas\nimport pandana as pdna\nimport  folium\nfrom branca.colormap import LinearColormap\nfrom folium.plugins import MousePosition\nimport xyzservices\n\npd.set_option('display.float_format', '{:.2f}'.format)\n# Load Citi Bike trip data (July 2024 dataset preview)\ndata_path1 = '202407-citibike-tripdata/202407-citibike-tripdata_1.csv'\ndata_path2 = '202407-citibike-tripdata/202407-citibike-tripdata_2.csv'\ndata1 = pd.read_csv(data_path1)\ndata2 = pd.read_csv(data_path2)\n\ntrips = pd.concat([data1, data2], ignore_index=True)\ntrips = trips[(trips['started_at'] &gt;= '2024-07-01') & (trips['started_at'] &lt;= '2024-07-15')]\n\n# Convert date columns to datetime format\ntrips['started_at'] = pd.to_datetime(trips['started_at'])\ntrips['ended_at'] = pd.to_datetime(trips['ended_at'])\n\n# Calculate trip duration in minutes\ntrips['trip_duration'] = (trips['ended_at'] - trips['started_at']).dt.total_seconds() / 60\n# Remove invalid trips (negative or zero duration)\ntrips = trips[trips['trip_duration'] &gt; 0]\n\n# Fetch Historical Weather Data using NOAA API\nnoaa_token = 'hiHwlLQdHGzOdZvDUHqynSFScHvhaaAd'  \nweather_url = 'https://www.ncdc.noaa.gov/cdo-web/api/v2/data'\n\n# Function to fetch NOAA weather data\ndef fetch_noaa_weather(start_date, end_date, station_id):\n    headers = {'token': noaa_token}\n    params = {\n        'datasetid': 'GHCND',\n        'datatypeid': ['TMAX', 'TMIN', 'PRCP'],\n        'stationid': station_id,\n        'startdate': start_date,\n        'enddate': end_date,\n        'units': 'metric',\n        'limit': 1000\n    }\n    response = requests.get(weather_url, headers=headers, params=params)\n    if response.status_code == 200:\n        return pd.DataFrame(response.json()['results'])\n    else:\n        print(f\"Error: {response.status_code} {response.text}\")\n        return pd.DataFrame()\n\n# Fetch weather data for July 2024\nstation_id = 'GHCND:USW00094728'  # NOAA station ID for Central Park, NYC\nweather_data = fetch_noaa_weather('2024-07-01', '2024-07-31', station_id)\n\n# Pivot weather data to have TMAX, TMIN, and PRCP as columns\nweather_summary = weather_data.pivot_table(\n    index='date',\n    columns='datatype',\n    values='value',\n    aggfunc='mean'\n).reset_index()\n\nweather_summary.columns = ['date', 'precipitation', 'temp_max', 'temp_min']\nweather_summary['date'] = pd.to_datetime(weather_summary['date']).dt.date\n\n# Merge weather data with Citi Bike data\ntrips = trips.merge(weather_summary, left_on=trips['started_at'].dt.date, right_on='date', how='left')\n\n## Geospatial Data Integration\n# Load NYC bike network data\nG = ox.graph_from_place('Manhattan, New York, USA', network_type='bike')\n# Convert the network graph to GeoDataFrames\nnodes, edges = ox.graph_to_gdfs(G, nodes=True, edges=True)\nnyc = pd.read_csv('2020_Census_Tracts_20241221.csv')\nmanhattan = nyc[nyc['BoroCode'] == 1]\nfrom shapely.wkt import loads\nmanhattan['geometry'] = manhattan['the_geom'].apply(loads).drop(columns=['the_geom'])\nmanhattan = gpd.GeoDataFrame(manhattan, geometry='geometry', crs='EPSG:4326')\nmanhattan = manhattan[['CTLabel', 'geometry']]\n# Add bike lane coverage data\ntrips = gpd.GeoDataFrame(trips, geometry=gpd.points_from_xy(trips.start_lng, trips.start_lat), crs='EPSG:4326')\n# Perform spatial join to keep only trips in Manhattan\ntrips = gpd.sjoin(trips, manhattan, how='inner', op='intersects')\ntrips['nearest_node'] = ox.distance.nearest_nodes(G, trips.geometry.x, trips.geometry.y)\n# Get the list of valid nodes from the Manhattan graph G\nmanhattan_nodes = set(G.nodes)\n# Filter stations to include only those with a nearest node in the Manhattan graph\ntrips = trips[trips['nearest_node'].isin(manhattan_nodes)]\n# Reset the index after filtering\ntrips = trips.reset_index(drop=True)\n\n# Ridership and Membership Analysis\n# Daily ridership and member contributions\nrides_per_day = trips.groupby(trips['started_at'].dt.date)['ride_id'].count()\nmembers_vs_casuals = trips['member_casual'].value_counts()\n\n# Plot daily ridership trends\nplt.figure(figsize=(10, 6))\nrides_per_day.plot(kind='line', marker='o', color='blue')\n\n# Customize the plot\nplt.title('Daily Ridership Trends', fontsize=16)\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Number of Rides', fontsize=12)\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.xticks(rotation=45)\nplt.ylim(bottom=0)\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n\n# Plot membership distribution\nplt.figure(figsize=(8, 8))\nmembers_vs_casuals.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightgreen'])\n\n# Customize the plot\nplt.title('Membership Distribution', fontsize=16)\nplt.ylabel('')  # Remove the default y-axis label\nplt.tight_layout()\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#background",
    "href": "Project/project.html#background",
    "title": "Optimizing Bike-Sharing Operations - Insights of CitiBike in Manhattan",
    "section": "",
    "text": "Citi Bike is New York City’s largest bike-sharing system, offering residents and tourists an affordable, sustainable, and efficient transportation alternative. Since its launch in 2013, Citi Bike has grown significantly, with thousands of bikes and hundreds of docking stations across Manhattan, Brooklyn, Queens, and other boroughs. As the demand for bike-sharing services continues to rise, there is a pressing need to analyze usage patterns, revenue generation, and network accessibility to enhance operational efficiency and user experience.\nThis project leverages trip data from Citi Bike for July 2024, focusing specifically on Manhattan. Manhattan serves as a critical area of analysis due to its high population density, diverse user base, and complex transportation dynamics. By analyzing trip data and integrating it with geospatial network information, this project aims to uncover key insights into ridership behavior, evaluate station accessibility, and identify opportunities to optimize the system’s operations and revenue.",
    "crumbs": [
      "Project",
      "Optimizing Bike-Sharing Operations - Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#motivation",
    "href": "Project/project.html#motivation",
    "title": "Optimizing Bike-Sharing Operations - Insights of CitiBike in Manhattan",
    "section": "Motivation",
    "text": "Motivation\nThe motivation behind this project stems from several key factors:\n\nSustainability and Urban Mobility: Citi Bike plays a vital role in promoting sustainable transportation in one of the world’s busiest cities. Understanding usage patterns and station accessibility can help policymakers and planners expand the bike network effectively, reducing car dependency and lowering carbon emissions.\nData-Driven Optimization: Citi Bike’s operations involve complex logistical challenges, including balancing bike distribution across stations, maintaining infrastructure, and optimizing pricing models. This project uses data-driven methods to evaluate station coverage, ridership trends, and revenue streams, providing actionable recommendations for operational improvement.\nImproving User Experience: By analyzing trip durations, weather impacts, and station-level trends, the project aims to identify factors influencing user satisfaction. Insights into peak usage times, station demand, and accessibility gaps can help enhance user convenience and attract more riders.",
    "crumbs": [
      "Project",
      "Optimizing Bike-Sharing Operations - Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#goals-and-objectives",
    "href": "Project/project.html#goals-and-objectives",
    "title": "Optimizing Bike-Sharing Operations - Insights of CitiBike in Manhattan",
    "section": "Goals and Objectives",
    "text": "Goals and Objectives\n\nRidership Analysis: Analyze daily and hourly trends in Citi Bike trips to identify peak times and seasonal usage patterns.\nStation Accessibility: Evaluate station coverage by integrating trip data with Manhattan’s bike network, calculating metrics like nearest nodes and coverage buffers.\nRevenue Assessment: Calculate revenue based on Citi Bike’s pricing structure, identifying top-performing stations and ride types that contribute to financial success.\nImpact of Weather: Investigate the relationship between weather conditions (e.g., temperature and precipitation) and ridership behavior.",
    "crumbs": [
      "Project",
      "Optimizing Bike-Sharing Operations - Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#ridership-and-membership-analysis",
    "href": "Project/project.html#ridership-and-membership-analysis",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "",
    "text": "The Citi Bike data reveals intriguing temporal trends in daily ridership. The chart titled Daily Ridership Trends demonstrates that the highest ridership occurred on weekdays, particularly July 1st and July 10th, corresponding to Monday and Wednesday, respectively. These peaks reflect the system’s role in supporting Manhattan’s weekday commuter base. The midweek ridership stability showcases Citi Bike’s seamless integration into the city’s transportation ecosystem for office workers, students, and other routine commuters.\nHowever, the sharp dip during the weekend (July 6th–7th) signals an underutilized potential for leisure trips. With Manhattan hosting several tourist hotspots and vibrant weekend activities, the absence of a proportional rise in leisure ridership on weekends is noteworthy. This suggests that Citi Bike could improve its outreach to tourists and casual users who might otherwise opt for taxis or public transit. Offering targeted weekend packages, promoting bike tours, or collaborating with cultural and recreational events could help bridge this gap.\nInterestingly, the overall average of 90,000 daily trips highlights the resilience and reliability of Citi Bike’s operations. Despite varying weather conditions and external factors, the consistent demand underscores its importance to New Yorkers.\nThe membership distribution paints a striking picture of Citi Bike’s user base. Members contribute 77.3% of all trips, far outweighing the 22.7% share of casual users. This divide is both a strength and a vulnerability. While the loyalty and frequent usage of members stabilize revenue streams, the low proportion of casual riders points to untapped market potential.\nCritically, casual users are an important demographic for expanding Citi Bike’s reach. Their occasional use might stem from perceived barriers, such as unfamiliarity with the system or a lack of compelling benefits to join as members. By targeting these riders with discounts, loyalty programs, or easier onboarding processes, Citi Bike can create a pathway for casual users to transition into long-term subscribers. Creative solutions such as gamification (e.g., earning badges for rides) or bundling memberships with other services (e.g., public transit passes) could further bolster membership numbers.\n\n\nShow/Hide Code\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nimport geopandas as gpd\nfrom datetime import datetime\nimport requests\nimport osmnx as ox\nfrom shapely.geometry import Polygon, Point\nimport hvplot.pandas\nimport pandana as pdna\nimport  folium\nfrom branca.colormap import LinearColormap\nfrom folium.plugins import MousePosition\nimport xyzservices\n\npd.set_option('display.float_format', '{:.2f}'.format)\n# Load Citi Bike trip data (July 2024 dataset preview)\ndata_path1 = '202407-citibike-tripdata/202407-citibike-tripdata_1.csv'\ndata_path2 = '202407-citibike-tripdata/202407-citibike-tripdata_2.csv'\ndata1 = pd.read_csv(data_path1)\ndata2 = pd.read_csv(data_path2)\n\ntrips = pd.concat([data1, data2], ignore_index=True)\ntrips = trips[(trips['started_at'] &gt;= '2024-07-01') & (trips['started_at'] &lt;= '2024-07-15')]\n\n# Convert date columns to datetime format\ntrips['started_at'] = pd.to_datetime(trips['started_at'])\ntrips['ended_at'] = pd.to_datetime(trips['ended_at'])\n\n# Calculate trip duration in minutes\ntrips['trip_duration'] = (trips['ended_at'] - trips['started_at']).dt.total_seconds() / 60\n# Remove invalid trips (negative or zero duration)\ntrips = trips[trips['trip_duration'] &gt; 0]\n\n# Fetch Historical Weather Data using NOAA API\nnoaa_token = 'hiHwlLQdHGzOdZvDUHqynSFScHvhaaAd'  \nweather_url = 'https://www.ncdc.noaa.gov/cdo-web/api/v2/data'\n\n# Function to fetch NOAA weather data\ndef fetch_noaa_weather(start_date, end_date, station_id):\n    headers = {'token': noaa_token}\n    params = {\n        'datasetid': 'GHCND',\n        'datatypeid': ['TMAX', 'TMIN', 'PRCP'],\n        'stationid': station_id,\n        'startdate': start_date,\n        'enddate': end_date,\n        'units': 'metric',\n        'limit': 1000\n    }\n    response = requests.get(weather_url, headers=headers, params=params)\n    if response.status_code == 200:\n        return pd.DataFrame(response.json()['results'])\n    else:\n        print(f\"Error: {response.status_code} {response.text}\")\n        return pd.DataFrame()\n\n# Fetch weather data for July 2024\nstation_id = 'GHCND:USW00094728'  # NOAA station ID for Central Park, NYC\nweather_data = fetch_noaa_weather('2024-07-01', '2024-07-31', station_id)\n\n# Pivot weather data to have TMAX, TMIN, and PRCP as columns\nweather_summary = weather_data.pivot_table(\n    index='date',\n    columns='datatype',\n    values='value',\n    aggfunc='mean'\n).reset_index()\n\nweather_summary.columns = ['date', 'precipitation', 'temp_max', 'temp_min']\nweather_summary['date'] = pd.to_datetime(weather_summary['date']).dt.date\n\n# Merge weather data with Citi Bike data\ntrips = trips.merge(weather_summary, left_on=trips['started_at'].dt.date, right_on='date', how='left')\n\n## Geospatial Data Integration\n# Load NYC bike network data\nG = ox.graph_from_place('Manhattan, New York, USA', network_type='bike')\n# Convert the network graph to GeoDataFrames\nnodes, edges = ox.graph_to_gdfs(G, nodes=True, edges=True)\nnyc = pd.read_csv('2020_Census_Tracts_20241221.csv')\nmanhattan = nyc[nyc['BoroCode'] == 1]\nfrom shapely.wkt import loads\nmanhattan['geometry'] = manhattan['the_geom'].apply(loads).drop(columns=['the_geom'])\nmanhattan = gpd.GeoDataFrame(manhattan, geometry='geometry', crs='EPSG:4326')\nmanhattan = manhattan[['CTLabel', 'geometry']]\n# Add bike lane coverage data\ntrips = gpd.GeoDataFrame(trips, geometry=gpd.points_from_xy(trips.start_lng, trips.start_lat), crs='EPSG:4326')\n# Perform spatial join to keep only trips in Manhattan\ntrips = gpd.sjoin(trips, manhattan, how='inner', op='intersects')\ntrips['nearest_node'] = ox.distance.nearest_nodes(G, trips.geometry.x, trips.geometry.y)\n# Get the list of valid nodes from the Manhattan graph G\nmanhattan_nodes = set(G.nodes)\n# Filter stations to include only those with a nearest node in the Manhattan graph\ntrips = trips[trips['nearest_node'].isin(manhattan_nodes)]\n# Reset the index after filtering\ntrips = trips.reset_index(drop=True)\n\n# Ridership and Membership Analysis\n# Daily ridership and member contributions\nrides_per_day = trips.groupby(trips['started_at'].dt.date)['ride_id'].count()\nmembers_vs_casuals = trips['member_casual'].value_counts()\n\n# Plot daily ridership trends\nplt.figure(figsize=(10, 6))\nrides_per_day.plot(kind='line', marker='o', color='blue')\n\n# Customize the plot\nplt.title('Daily Ridership Trends', fontsize=16)\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('Number of Rides', fontsize=12)\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.xticks(rotation=45)\nplt.ylim(bottom=0)\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n\n# Plot membership distribution\nplt.figure(figsize=(8, 8))\nmembers_vs_casuals.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightgreen'])\n\n# Customize the plot\nplt.title('Membership Distribution', fontsize=16)\nplt.ylabel('')  # Remove the default y-axis label\nplt.tight_layout()\n\n# Show the plot\nplt.show()",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#weather-impact-on-customer-behavior",
    "href": "Project/project.html#weather-impact-on-customer-behavior",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "Weather Impact on Customer Behavior",
    "text": "Weather Impact on Customer Behavior\nThe influence of weather on ridership cannot be overstated. The chart Temperature vs. Ridership reveals a modest decline in ridership as temperatures exceed 30°C, emphasizing the discomfort associated with cycling during extreme heat. Riders appear to prefer moderate temperatures, with the sweet spot lying between 27°C and 29°C. This highlights a unique challenge: while bike usage peaks during favorable weather conditions, extreme heat—common during New York’s summers—may reduce ridership.\nThe chart Precipitation vs. Ridership offers even more stark insights. Days with any significant rainfall experienced drastic reductions in ridership, with the number of trips dropping almost to zero on heavily rainy days. This underscores the reliance of Citi Bike on fair-weather riders and raises the question of how to maintain ridership during adverse conditions.\nCiti Bike could mitigate these impacts by implementing weather-responsive strategies. For example, offering discounts or loyalty points on rainy days could encourage usage even during light rain. Additionally, providing weather protection gear such as rain ponchos or collaborating with local stores to offer discounts for riders could reduce the deterrent effect of precipitation.\n\n\nShow/Hide Code\n# Analyze ridership under different weather conditions\nweather_impact = trips.groupby('date').agg(\n    ride_count=('ride_id', 'size'),\n    max_temp=('temp_max', 'max'),\n    total_precip=('precipitation', 'sum')\n).reset_index()\n\n# Line plot with regression: Temperature vs. Average Daily Ridership\nsns.lmplot(x='max_temp', y='ride_count', data=weather_impact, aspect=2, height=6, scatter_kws={'color':'blue'}, line_kws={'color':'red'})\nplt.title('Temperature vs. Ridership with Trend Line (7/1 to 7/15)')\nplt.xlabel('Max Temperature (°C)')\nplt.ylabel('Ride Count')\nplt.ylim(bottom=0)\nplt.show()\n# Scatter plot: Precipitation vs. Ridership\nplt.figure(figsize=(12, 6))\nsns.scatterplot(x='total_precip', y='ride_count', data=weather_impact, color='green')\nplt.title('Precipitation vs. Ridership (7/1 to 7/15)')\nplt.xlabel('Total Precipitation (mm)')\nplt.ylabel('Ride Count')\nplt.ylim(bottom=0)\nplt.show()",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#revenue-analysis",
    "href": "Project/project.html#revenue-analysis",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "Revenue Analysis",
    "text": "Revenue Analysis\nThe horizontal bar chart Top 10 Stations by Revenue underscores a stark revenue concentration at a few key stations. Stations near Central Park (7 Ave & Central Park South, Central Park S & 6 Ave) consistently generated the highest revenue, followed closely by West St & Chambers St in the financial district. These findings highlight the dual role of Citi Bike stations: supporting commuting in business hubs and catering to leisure activities near tourist destinations.\nInterestingly, the revenue disparity between high-performing and low-performing stations raises questions about station placement. While some stations thrive due to their strategic locations, others may struggle due to poor connectivity, low foot traffic, or limited bike availability. By analyzing underperforming stations in conjunction with ridership patterns, Citi Bike could optimize station placement and redistribute underused assets to high-demand areas.\nFurthermore, the concentration of revenue at a few stations underscores the need for dynamic resource allocation. High-performing stations require frequent bike redistribution and maintenance to ensure uninterrupted service during peak hours.\n\n\nShow/Hide Code\n# Pricing logic based on Citi Bike pricing\n# Single Ride: $4.79 for 30 minutes, $0.36/min thereafter\n# Day Pass: $19/day with unlimited 30-minute rides, $4 every 15 minutes after 30 minutes\n# Citi Bike Annual Member: $219.99/year, $0.24/min for e-bikes\n# Lyft Pink Member: $199/year, $0.24/min for e-bikes\ndef calculate_revenue(row):\n    if row['member_casual'] == 'casual':\n        if row['trip_duration'] &lt;= 30:\n            return 4.79  # Flat fee for single rides\n        else:\n            return 4.79 + 0.36 * (row['trip_duration'] - 30)  # Extra charge after 30 mins\n    elif row['member_casual'] == 'member':\n        return 0.24 * row['trip_duration']  # Per-minute charge for e-bikes\n    else:\n        return 0  # Default if no valid category\n    \ntrips['revenue'] = trips.apply(calculate_revenue, axis=1)\ntotal_revenue = trips['revenue'].sum()\n#print(f'Total Revenue: ${total_revenue}')\n# Station Performance\nstation_revenue = trips.groupby('start_station_name')['revenue'].sum().sort_values(ascending=False)\ntop_stations = station_revenue.head(10)\n# Plot a horizontal bar chart\nplt.figure(figsize=(10, 6))\ntop_stations.plot(kind='barh', color='skyblue', edgecolor='black')\n# Add labels and title\nplt.title('Top 10 Stations by Revenue', fontsize=16)\nplt.xlabel('Revenue ($)', fontsize=12)\nplt.ylabel('Station Name', fontsize=12)\nplt.gca().invert_yaxis()  # Invert y-axis for readability\nplt.grid(axis='x', linestyle='--', alpha=0.7)\n# Show the plot\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#customer-segmentation",
    "href": "Project/project.html#customer-segmentation",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "Customer Segmentation",
    "text": "Customer Segmentation\nThe table Customer Segments provides an in-depth look at Citi Bike’s user base, categorized into two distinct clusters. Casual users, represented by Cluster 0, take significantly longer trips (24.12 minutes on average) but contribute fewer total trips (277,748). This cluster aligns with leisure-oriented riders who likely use Citi Bike for recreation or occasional errands.\nIn contrast, Cluster 1, dominated by members, reflects a commuter-driven behavior. With an average trip duration of 12.23 minutes and a total trip count of 945,056, this cluster underscores the reliance of Citi Bike on short, frequent trips by daily commuters. Members likely use Citi Bike as a last-mile solution, connecting subway stations or buses to their workplaces.\nThese insights have profound implications for marketing and operational strategies. For casual users, Citi Bike could promote longer leisure rides through partnerships with tourist attractions or cultural sites. For members, enhancing commuter-centric services, such as guaranteed bike availability during rush hours, could further cement their loyalty.\n\n\nShow/Hide Code\n# K-Means Clustering for Customer Segmentation\n# Features: Average trip duration, trip count\nuser_features = trips.groupby('member_casual').agg(\n    avg_duration=('trip_duration', 'mean'),\n    trip_count=('ride_id', 'count')\n).reset_index()\n\nkmeans = KMeans(n_clusters=2, random_state=42)\nuser_features['cluster'] = kmeans.fit_predict(user_features[['avg_duration', 'trip_count']])\n\nfrom IPython.display import display\n\n# Define a mapping for cluster labels to make them more descriptive\ncluster_labels = {\n    0: \"High Duration, Low Trip Count (Casual Users)\",\n    1: \"Low Duration, High Trip Count (Members)\"\n}\n\n# Add descriptive cluster labels\nuser_features['cluster_label'] = user_features['cluster'].map(cluster_labels)\n\n# Format the table with renamed columns for better presentation\nsegmentation_table = user_features.rename(columns={\n    'member_casual': 'User Type',\n    'avg_duration': 'Average Trip Duration (mins)',\n    'trip_count': 'Total Trip Count',\n    'cluster_label': 'Segment Description'\n}).drop(columns=['cluster'])\n\n# Display the table\nprint(\"\\nCustomer Segmentation Table:\")\ndisplay(segmentation_table)\n\n\n\nCustomer Segmentation Table:\n\n\n\n\n\n\n\n\n\nUser Type\nAverage Trip Duration (mins)\nTotal Trip Count\nSegment Description\n\n\n\n\n0\ncasual\n24.12\n277748\nHigh Duration, Low Trip Count (Casual Users)\n\n\n1\nmember\n12.23\n945056\nLow Duration, High Trip Count (Members)",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#station-performance-and-connectivity-analysis",
    "href": "Project/project.html#station-performance-and-connectivity-analysis",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "Station Performance and Connectivity Analysis",
    "text": "Station Performance and Connectivity Analysis\nThe distribution of total trips reveals a strong concentration of high-performing stations in central Manhattan, particularly in areas such as Midtown, Central Park, and the Financial District. Stations near Central Park, including 7 Ave & Central Park South and Central Park S & 6 Ave, continue to stand out as major hubs, aligning with previous revenue analyses. These stations attract a mix of commuter and leisure riders, leveraging their strategic location near residential areas, office spaces, and tourist attractions.\nOn the other hand, stations in the Upper Manhattan region and the peripheral areas of Lower Manhattan demonstrate relatively lower activity. This discrepancy may be attributed to a combination of factors, such as lower population density, limited tourist attractions, or weaker connectivity to bike lanes and public transit hubs. For example, stations along the northern parts of the island might benefit from targeted campaigns to encourage usage among nearby residents and commuters.\nThe analysis also highlights several outlier stations with unusually high total trips. These stations may serve as critical redistribution points in the network, playing an outsized role in balancing bike availability across Manhattan. Such patterns underscore the need for Citi Bike to focus resources on maintaining and scaling these high-demand locations.\nA significant and promising finding is that all Citi Bike stations in Manhattan are connected to a bike lane within 100 meters. This high level of connectivity is critical for ensuring the system’s usability and safety. The seamless integration with Manhattan’s extensive bike lane network provides riders with a safe and convenient experience, minimizing interactions with vehicle traffic.\nThe proximity to bike lanes plays a pivotal role in encouraging ridership, particularly for casual users who may feel less confident cycling in mixed traffic conditions. Stations with strong connectivity to bike lanes often exhibit higher trip counts, reinforcing the importance of station placement near well-developed cycling infrastructure.\nFrom a policy perspective, these findings validate the city’s ongoing efforts to expand and enhance its bike lane network. Further investments in bike lane infrastructure, particularly in regions with low ridership, could help improve station utilization and support Citi Bike’s growth.\n\n\nShow/Hide Code\n# Calculate average ridership per station\n#station = trips.groupby('start_station_id')['ride_id'].count().reset_index()\nstation = trips.groupby(['start_station_name', 'start_station_id']).agg({\n    'ride_id': 'count',                # Total trips\n    'geometry': 'first',  # Keep the geometry of each station\n    'trip_duration': 'mean',           # Average trip duration\n    'precipitation': 'mean',           # Average precipitation\n    'temp_max': 'mean',                # Average max temperature\n    'geometry': 'first',               # Keep the first geometry for mapping\n    'nearest_node' : 'first',\n}).reset_index()\n\n# Rename columns for clarity\nstation.rename(columns={\n    'ride_id': 'total_trips',\n    'trip_duration': 'avg_trip_duration',\n    'precipitation': 'avg_precipitation',\n    'temp_max': 'avg_temp_max'\n}, inplace=True)\n# Ensure the result is a GeoDataFrame\nstation = gpd.GeoDataFrame(station, geometry='geometry',crs='EPSG:4326')\n# Reproject stations and edges to a CRS with units\nedges = edges.to_crs(epsg=4326)\n# Calculate the nearest edge for each station\nstation['nearest_edge'] = station.geometry.apply(\n    lambda geom: ox.distance.nearest_edges(G, geom.x, geom.y)\n)\n# Ensure 'u' and 'v' columns exist by resetting the index\nedges = edges.reset_index()\n# Extract the geometry of the nearest edge for each station\nstation['nearest_edge_geom'] = station['nearest_edge'].apply(\n    lambda edge: edges.loc[(edges['u'] == edge[0]) & (edges['v'] == edge[1]), 'geometry'].values[0]\n)\n# Get the geometry of the nearest edge for each station\nstation['nearest_edge_geom'] = station['nearest_edge'].apply(\n    lambda edge: edges.loc[(edges['u'] == edge[0]) & (edges['v'] == edge[1]), 'geometry'].values[0]\n)\n# Calculate the distance to the nearest bike lane\nstation['distance_to_bike_lane'] = station.apply(\n    lambda row: row.geometry.distance(row.nearest_edge_geom), axis=1\n)\n\n# Add connectivity flag: 1 if connected (within 50 meters), 0 otherwise\nstation['connected_to_bike_lane'] = (station['distance_to_bike_lane'] &lt;= 500).astype(int)\n# Summary statistics\nconnected_count = station['connected_to_bike_lane'].sum()\ntotal_stations = len(station)\n#print(f\"Connected stations: {connected_count} / {total_stations} ({(connected_count / total_stations) * 100:.2f}%)\")\n# Drop the `nearest_edge_geom` column to avoid serialization issues\nstation_m = station.drop(columns=['nearest_edge_geom'])\nm = station_m.explore(\n    column='total_trips',  # Color stations by total trips\n   # cmap='Accent',\n    tooltip=['start_station_name', 'total_trips', 'avg_trip_duration'],\n    style_kwds={\"weight\": 2,  \"fillOpacity\": 0.6},\n    name=\"Stations Coverage\",\n    tiles=xyzservices.providers.CartoDB.DarkMatter,\n)\n# Add a base map using folium\nmap_center = [station_m.geometry.y.mean(), station_m.geometry.x.mean()]\n#base_map = folium.Map(location=map_center, zoom_start=12, tiles=\"CartoDB.Positron\")\n# Add the street network to the map\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/project.html#conclusion-and-recommendations",
    "href": "Project/project.html#conclusion-and-recommendations",
    "title": "Bike-Sharing Operations Insights of CitiBike in Manhattan",
    "section": "Conclusion and Recommendations",
    "text": "Conclusion and Recommendations\nThis spatial analysis underscores the success of Citi Bike’s station placement strategy in Manhattan, particularly its integration with the city’s bike lane network. The combination of strong connectivity, strategic locations, and dual-purpose usage patterns for commuters and leisure riders makes Citi Bike an indispensable part of New York City’s transportation landscape. By addressing disparities in station performance and continuing to align with Manhattan’s bike lane expansion, Citi Bike can further enhance its usability, sustainability, and user satisfaction. Here are the recommendations from the analysis to improve the operations of Citibikes:\n\nExpand Infrastructure in High-Demand Areas Central Park and Midtown:The analysis highlights that stations near Central Park and Midtown are consistently high-performing in terms of revenue and trip counts. Expanding capacity at these stations by adding more docks and bikes can alleviate pressure during peak times. Introducing additional stations in nearby areas can distribute demand more evenly and reduce congestion. Financial District: Stations in the financial district also generate significant revenue, likely driven by commuting patterns. Adding more stations or expanding existing ones in this area can cater to the growing commuter demand.\nOptimize Underperforming Stations Northern and Peripheral Manhattan: Launch targeted marketing campaigns to raise awareness about these stations; Partner with local businesses or community organizations to integrate these stations into daily life. Relocation or Redistribution: For persistently underperforming stations, consider relocating them to areas with higher foot traffic or better connectivity to bike lanes.\nLeverage Weather-Responsive Strategies Weather-Based Incentives: Ridership drops significantly during rainy days and extreme heat. Offering discounts or loyalty points on rainy days could encourage usage, even in unfavorable weather conditions. Gear and Comfort Enhancements: Provide riders with rain ponchos or collaborate with local stores to offer discounts on weather gear for riders.; Introduce shaded docking stations in high-traffic areas to improve comfort during summer.\nStrengthen Member Engagement Convert Casual Users to Members: Casual users contribute 22.7% of trips but have longer trip durations. This group represents an opportunity to grow membership by: Offering discounted membership trials; Highlighting member-exclusive benefits, such as extended trip durations or priority access during peak times.",
    "crumbs": [
      "Project",
      "Bike-Sharing Operations Insights of CitiBike in Manhattan"
    ]
  },
  {
    "objectID": "Project/Project Overview.html",
    "href": "Project/Project Overview.html",
    "title": "Project Overview",
    "section": "",
    "text": "Citi Bike is New York City’s largest bike-sharing system, offering residents and tourists an affordable, sustainable, and efficient transportation alternative. Since its launch in 2013, Citi Bike has grown significantly, with thousands of bikes and hundreds of docking stations across Manhattan, Brooklyn, Queens, and other boroughs. As the demand for bike-sharing services continues to rise, there is a pressing need to analyze usage patterns, revenue generation, and network accessibility to enhance operational efficiency and user experience.\nThis project leverages trip data from Citi Bike for July 2024, focusing specifically on Manhattan. Manhattan serves as a critical area of analysis due to its high population density, diverse user base, and complex transportation dynamics. By analyzing trip data and integrating it with geospatial network information, this project aims to uncover key insights into ridership behavior, evaluate station accessibility, and identify opportunities to optimize the system’s operations and revenue.\n\n\n\nThe motivation behind this project stems from several key factors:\n\nSustainability and Urban Mobility: Citi Bike plays a vital role in promoting sustainable transportation in one of the world’s busiest cities. Understanding usage patterns and station accessibility can help policymakers and planners expand the bike network effectively, reducing car dependency and lowering carbon emissions.\nData-Driven Optimization: Citi Bike’s operations involve complex logistical challenges, including balancing bike distribution across stations, maintaining infrastructure, and optimizing pricing models. This project uses data-driven methods to evaluate station coverage, ridership trends, and revenue streams, providing actionable recommendations for operational improvement.\nImproving User Experience: By analyzing trip durations, weather impacts, and station-level trends, the project aims to identify factors influencing user satisfaction. Insights into peak usage times, station demand, and accessibility gaps can help enhance user convenience and attract more riders.\n\n\n\n\n\nRidership Analysis: Analyze daily and hourly trends in Citi Bike trips to identify peak times and seasonal usage patterns.\nStation Accessibility: Evaluate station coverage by integrating trip data with Manhattan’s bike network, calculating metrics like nearest nodes and coverage buffers.\nRevenue Assessment: Calculate revenue based on Citi Bike’s pricing structure, identifying top-performing stations and ride types that contribute to financial success.\nImpact of Weather: Investigate the relationship between weather conditions (e.g., temperature and precipitation) and ridership behavior.",
    "crumbs": [
      "Project",
      "Project Overview"
    ]
  },
  {
    "objectID": "Project/Project Overview.html#background",
    "href": "Project/Project Overview.html#background",
    "title": "Project Overview",
    "section": "",
    "text": "Citi Bike is New York City’s largest bike-sharing system, offering residents and tourists an affordable, sustainable, and efficient transportation alternative. Since its launch in 2013, Citi Bike has grown significantly, with thousands of bikes and hundreds of docking stations across Manhattan, Brooklyn, Queens, and other boroughs. As the demand for bike-sharing services continues to rise, there is a pressing need to analyze usage patterns, revenue generation, and network accessibility to enhance operational efficiency and user experience.\nThis project leverages trip data from Citi Bike for July 2024, focusing specifically on Manhattan. Manhattan serves as a critical area of analysis due to its high population density, diverse user base, and complex transportation dynamics. By analyzing trip data and integrating it with geospatial network information, this project aims to uncover key insights into ridership behavior, evaluate station accessibility, and identify opportunities to optimize the system’s operations and revenue.",
    "crumbs": [
      "Project",
      "Project Overview"
    ]
  },
  {
    "objectID": "Project/Project Overview.html#motivation",
    "href": "Project/Project Overview.html#motivation",
    "title": "Project Overview",
    "section": "",
    "text": "The motivation behind this project stems from several key factors:\n\nSustainability and Urban Mobility: Citi Bike plays a vital role in promoting sustainable transportation in one of the world’s busiest cities. Understanding usage patterns and station accessibility can help policymakers and planners expand the bike network effectively, reducing car dependency and lowering carbon emissions.\nData-Driven Optimization: Citi Bike’s operations involve complex logistical challenges, including balancing bike distribution across stations, maintaining infrastructure, and optimizing pricing models. This project uses data-driven methods to evaluate station coverage, ridership trends, and revenue streams, providing actionable recommendations for operational improvement.\nImproving User Experience: By analyzing trip durations, weather impacts, and station-level trends, the project aims to identify factors influencing user satisfaction. Insights into peak usage times, station demand, and accessibility gaps can help enhance user convenience and attract more riders.",
    "crumbs": [
      "Project",
      "Project Overview"
    ]
  },
  {
    "objectID": "Project/Project Overview.html#goals-and-objectives",
    "href": "Project/Project Overview.html#goals-and-objectives",
    "title": "Project Overview",
    "section": "",
    "text": "Ridership Analysis: Analyze daily and hourly trends in Citi Bike trips to identify peak times and seasonal usage patterns.\nStation Accessibility: Evaluate station coverage by integrating trip data with Manhattan’s bike network, calculating metrics like nearest nodes and coverage buffers.\nRevenue Assessment: Calculate revenue based on Citi Bike’s pricing structure, identifying top-performing stations and ride types that contribute to financial success.\nImpact of Weather: Investigate the relationship between weather conditions (e.g., temperature and precipitation) and ridership behavior.",
    "crumbs": [
      "Project",
      "Project Overview"
    ]
  },
  {
    "objectID": "Project/index.html#high-level-summary",
    "href": "Project/index.html#high-level-summary",
    "title": "Project",
    "section": "",
    "text": "This report provides a comprehensive analysis of Citi Bike operations in Manhattan during July 2024, uncovering key insights into ridership behavior, revenue generation, and station performance. The study highlights the system’s reliance on weekday commuter demand, its sensitivity to weather conditions, and its strong integration with Manhattan’s bike lane network.\nThe findings emphasize opportunities for targeted interventions, such as expanding infrastructure in high-demand areas, improving underperforming stations, and incentivizing casual users to convert to memberships. These recommendations aim to optimize operations, enhance user satisfaction, and reinforce Citi Bike’s role as a sustainable urban mobility solution in New York City.",
    "crumbs": [
      "Project"
    ]
  }
]